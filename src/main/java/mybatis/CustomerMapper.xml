<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mybatis.Customer">


	<resultMap id="customerResultMap" type="mybatis.Customer">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="age" column="age" />
		<result property="des" column="des" />
	</resultMap>






	<!-- 用来定义可重用的 SQL 代码段,可以包含在其他语句中。 -->
	<sql id="customerColumns"> name,age,des </sql>
	<select id="selectCustomerAll3" resultType="Customer">
		select
		<include refid="customerColumns" />
		from customers
	</select>


	<!-- useGeneratedKey ( 仅 对 insert, update 有 用 ) 这 会 告 诉 MyBatis 使 用 JDBC 
		的 getGeneratedKeys 方法来取出由数据 (比如:像 MySQL 和 SQL Server 这样的数据库管理系统的自动递增字段)内部生成的主键。 
		默认值:false。 <selectKey keyProperty="id" resultType="int" order="BEFORE"> select 
		CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1 </selectKey> #{property,javaType=int,jdbcType=NUMERIC} 
		ORDER BY ${columnName} 这里 MyBatis 不会修改或转义字符串。 -->
	<insert id="saveCustomer" parameterType="mybatis.Customer"
		useGeneratedKeys="true" keyProperty="id" flushCache="true">
		insert into
		customers(name,age,des) values (#{name}, #{age}, #{des})
	</insert>


	<select id="selectCustomerAll" resultType="Customer" flushCache="false" useCache="true">
		select id,name,age,des
		from customers
	</select>
	
	<!--   
		数组 ：
		<foreach item="item" index="index" collection="array" open="(" separator="," close=")">  
		 	#{item}  
		</foreach> 
	-->
	<select id="selectCustomer3" resultType="Customer">
		SELECT id,name,age,des
		FROM customers
		WHERE id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>


	<select id="selectCustomerByBind" parameterType="Customer" resultType="Customer">
		<!-- <bind name="pattern" value="'%' + ${name} + '%'" />  此未测试成功 -->
		<bind name="pattern" value="'%' + _parameter.getName() + '%'" />
		SELECT id,name,age,des
		FROM customers
		WHERE name like #{pattern}
	</select>


	<!-- resultType="hashmap" 返回一个 HashMap 类型的对象,其中的键是列名,值是列对应的值。 -->
	<select id="selectCustomerAll2" resultType="hashmap">
		select
		id,name,age,des
		from customers
	</select>


	<!-- 可用的收回策略有: 
			LRU – 最近最少使用的:移除最长时间不被使用的对象。 
			FIFO – 先进先出:按对象进入缓存的顺序来移除它们。 
			SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。 
			WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。 
			默认的是 LRU。
		flushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。
		size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。
		readOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。
			这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。
	-->
	
	<!-- <cache type="com.domain.something.MyCustomCache"/> 自定义缓存 -->
	<!-- <cache-ref namespace="com.someone.application.data.SomeMapper"/> 共享相同的缓存-->
	
	<!-- 创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会 导致冲突。 -->
	<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true" />




</mapper>